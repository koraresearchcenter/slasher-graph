---
---

<div id="p5-container"></div>

<script>
import p5 from 'p5';

let particles = [];
let knives = [];
let machetes = [];

new p5((p) => {
    p.setup = function() {
        let canvas = p.createCanvas(p.windowWidth, p.windowHeight);
        canvas.parent('p5-container');
        
        // Create particles
        for (let i = 0; i < 50; i++) {
            particles.push(new Particle(p));
        }
        
        // Create floating weapons
        for (let i = 0; i < 5; i++) {
            knives.push(new Knife(p));
            machetes.push(new Machete(p));
        }
    };

    p.draw = function() {
        p.clear();
        
        // Update and draw particles
        particles.forEach(particle => {
            particle.update();
            particle.draw();
        });
        
        // Update and draw weapons
        knives.forEach(knife => {
            knife.update();
            knife.draw();
        });
        
        machetes.forEach(machete => {
            machete.update();
            machete.draw();
        });
    };

    p.windowResized = function() {
        p.resizeCanvas(p.windowWidth, p.windowHeight);
    };

    // Particle class
    class Particle {
        constructor(p) {
            this.p = p;
            this.x = p.random(p.width);
            this.y = p.random(p.height);
            this.size = p.random(2, 6);
            this.speedX = p.random(-0.5, 0.5);
            this.speedY = p.random(-0.5, 0.5);
            this.opacity = p.random(100, 255);
        }

        update() {
            this.x += this.speedX;
            this.y += this.speedY;

            if (this.x < 0 || this.x > this.p.width) this.speedX *= -1;
            if (this.y < 0 || this.y > this.p.height) this.speedY *= -1;
        }

        draw() {
            this.p.noStroke();
            this.p.fill(255, 107, 0, this.opacity);
            this.p.square(this.x, this.y, this.size);
        }
    }

    // Knife class (8-bit style)
    class Knife {
        constructor(p) {
            this.p = p;
            this.x = p.random(p.width);
            this.y = p.random(p.height);
            this.rotation = p.random(p.TWO_PI);
            this.rotationSpeed = p.random(-0.02, 0.02);
            this.speedX = p.random(-0.3, 0.3);
            this.speedY = p.random(-0.3, 0.3);
        }

        update() {
            this.x += this.speedX;
            this.y += this.speedY;
            this.rotation += this.rotationSpeed;

            if (this.x < -50) this.x = this.p.width + 50;
            if (this.x > this.p.width + 50) this.x = -50;
            if (this.y < -50) this.y = this.p.height + 50;
            if (this.y > this.p.height + 50) this.y = -50;
        }

        draw() {
            this.p.push();
            this.p.translate(this.x, this.y);
            this.p.rotate(this.rotation);
            
            // Blade
            this.p.fill(200, 200, 200);
            this.p.noStroke();
            for (let i = 0; i < 6; i++) {
                this.p.rect(0, i * 4 - 12, 3, 4);
            }
            
            // Handle
            this.p.fill(50, 50, 50);
            this.p.rect(0, 12, 4, 8);
            
            this.p.pop();
        }
    }

    // Machete class
    class Machete {
        constructor(p) {
            this.p = p;
            this.x = p.random(p.width);
            this.y = p.random(p.height);
            this.rotation = p.random(p.TWO_PI);
            this.rotationSpeed = p.random(-0.02, 0.02);
            this.speedX = p.random(-0.3, 0.3);
            this.speedY = p.random(-0.3, 0.3);
        }

        update() {
            this.x += this.speedX;
            this.y += this.speedY;
            this.rotation += this.rotationSpeed;

            if (this.x < -50) this.x = this.p.width + 50;
            if (this.x > this.p.width + 50) this.x = -50;
            if (this.y < -50) this.y = this.p.height + 50;
            if (this.y > this.p.height + 50) this.y = -50;
        }

        draw() {
            this.p.push();
            this.p.translate(this.x, this.y);
            this.p.rotate(this.rotation);
            
            // Blade
            this.p.fill(150, 150, 150);
            this.p.noStroke();
            for (let i = 0; i < 8; i++) {
                this.p.rect(0, i * 4 - 16, 5, 4);
            }
            
            // Handle
            this.p.fill(30, 30, 30);
            this.p.rect(0, 16, 6, 10);
            
            this.p.pop();
        }
    }
});
</script>

